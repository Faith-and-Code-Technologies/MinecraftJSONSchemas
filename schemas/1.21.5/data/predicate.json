{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "predicate": {
            "title": "Predicate",
            "description": "Schema for defining Minecraft predicates.",
            "required": ["condition"],
            "oneOf": [
                {
                    "title": "All Of",
                    "description": "Evaluates a list of predicates and passes if all of them pass. Invokable from any context.",
                    "type": "object",
                    "properties": {
                        "condition": {"type": "string", "const": "minecraft:all_of"},
                        "terms": {
                            "type": "array",
                            "title": "Terms",
                            "description": "The list of predicates to evaluate.",
                            "items": {
                                "$ref": "#/definitions/predicate"
                            }
                        }
                    },
                    "required": ["condition", "terms"]
                },
                {
                    "title": "Any Of",
                    "description": "Evaluates a list of predicates and passes if any one of them passes. Invokable from any context.",
                    "type": "object",
                    "properties": {
                        "condition": {"type": "string", "const": "minecraft:any_of"},
                        "terms": {
                            "type": "array",
                            "title": "Terms",
                            "description": "The list of predicates to evaluate.",
                            "items": {
                                "$ref": "#/definitions/predicate"
                            }
                        }
                    },
                    "required": ["condition", "terms"]
                },
                {
                    "title": "Block State Property",
                    "description": "Checks the mined block and its block states.",
                    "allOf": [
                        {
                            "type": "object",
                            "properties": {
                                "condition": {"type": "string", "const": "minecraft:block_state_property"}
                            },
                            "required": ["condition"]
                        },
                        {
                            "$ref": "../utils/blockstates_for_predicate.json#/definitions/blockStates"
                        }
                    ]
                },
                {
                    "title": "Damage Source Properties",
                    "description": "Checks properties of a damage source.",
                    "type": "object",
                    "properties": {
                        "condition": { "type": "string", "const": "minecraft:damage_source_properties" },
                        "predicate": {
                            "type": "object",
                            "description": "The damage source properties to check.",
                            "title": "Predicate",
                            "$ref": "../utils/damage_types.json#/definitions/damageTypes"
                        }
                    },
                    "required": ["condition", "predicate"]
                },
                {
                    "title": "Enchantment Active Check",
                    "description": "Checks if the enchantment has been active.",
                    "type": "object",
                    "properties": {
                        "condition": {"type": "string", "const": "minecraft:enchantment_active_check"},
                        "enchantment_active_check": {
                            "type": "boolean",
                            "title": "Enchantment Active Check?",
                            "description": "Checks if the enchantment has been active."
                        }
                    },
                    "required": ["condition", "enchantment_active_check"]
                },
                {
                    "title": "Entity Properties",
                    "description": "Checks properties of an entity.",
                    "type": "object",
                    "properties": {
                        "condition": {"type": "string", "const": "minecraft:entity_properties" },
                        "entity": {
                            "type": "string",
                            "enum": ["this", "attacker", "direct_attacker", "attacking_player"],
                            "description": "The entity to evaluate."
                        },
                        "predicate": {
                            "$ref": "../utils/entity_condition.json#/definitions/entityCondition"
                        }
                    },
                    "required": ["condition", "entity", "predicate"]
                },
                {
                    "title": "Entity Scores",
                    "description": "Checks the scoreboard scores of an entity.",
                    "type": "object",
                    "properties": {
                        "condition": {"type": "string", "const": "minecraft:inverted"},
                        "entity": {
                            "type": "string",
                            "enum": ["this", "attacker", "direct_attacker", "attacking_player"],
                            "description": "The entity to check."
                        },
                        "scores": {
                            "type": "object",
                            "additionalProperties": {
                                "oneOf": [
                                    {
                                        "type": "integer"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "min": {
                                                "$ref": "../utils/number_provider.json#/definitions/integerNumberProvider"
                                            },
                                            "max": {
                                                "$ref": "../utils/number_provider.json#/definitions/integerNumberProvider"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                ]
                            }
                        }
                    },
                    "required": ["condition", "entity", "scores"]
                },
                {
                    "title": "Inverted",
                    "description": "Inverts the result of another predicate.",
                    "type": "object",
                    "properties": {
                        "condition": {"type": "string", "const": "minecraft:inverted" },
                        "term": { "$ref": "#/definitions/predicate" }
                    },
                    "required": ["condition", "predicate"]
                },
                {
                    "title": "Killed By Player",
                    "description": "Checks if there is a attacking_player entity provided by loot context.",
                    "type": "object",
                    "properties": {
                        "condition": {"type": "string", "const": "minecraft:killed_by_player" }
                    },
                    "required": ["condition"]
                },
                {
                    "title": "Location Check",
                    "description": "Checks properties of a specific location.",
                    "type": "object",
                    "properties": {
                        "condition": {"type": "string", "const": "minecraft:location_check" },
                        "offsetX": {
                            "type": "integer",
                            "title": "offsetY"
                        },
                        "offsetY": {
                            "type": "integer",
                            "title": "offsetX"
                        },
                        "offsetZ": {
                            "type": "integer",
                            "title": "offsetZ"
                        },
                        "predicate": {
                            "$ref": "../utils/location_predicate.json#/definitions/locationPredicate"
                        }
                    },
                    "required": ["condition", "predicate"]
                },
                {
                    "title": "Match Tool",
                    "description": "Checks properties of a tool.",
                    "type": "object",
                    "properties": {
                        "condition": {"type": "string", "const": "minecraft:match_tool" },
                        "predicate": {
                            "$ref": "../utils/item_predicate.json#/definitions/itemPredicate"
                        }
                    },
                    "required": ["condition", "predicate"]
                },
                {
                    "title": "Random Chance",
                    "description": "Generates a random number between 0.0 and 1.0, and checks if it is less than a specified value.",
                    "type": "object",
                    "properties": {
                        "condition": {"type": "string", "const": "minecraft:random_chance" },
                        "chance": {
                            "title": "Chance",
                            "$ref": "../utils/number_provider.json#/definitions/floatNumberProvider"
                        }
                    },
                    "required": ["condition", "chance"]
                },
                {
                    "title": "Random Chance With Enchanted Bonus",
                    "description": "Generates a random number between 0.0 and 1.0, and checks if it is less than the value determined using the level of a given enchantment.",
                    "type": "object",
                    "properties": {
                        "condition": {"type": "string", "const": "minecraft:random_chance_with_enchanted_bonus" },
                        "unenchanted_chance": {
                            "type": "number",
                            "title": "Unenchanted Chance",
                            "description": "The success rate to use when the enchantment is not present.",
                            "minimum": 0.0,
                            "maximum": 1.0
                        },
                        "enchanted_chance": {
                            "title": "Enchanted Chance",
                            "description": "The success rate based on the level when then enchantment is present. Must be between 0.0 and 1.0",
                            "$ref": "../utils/level_based_value.json#/definitions/levelBasedValue"
                        },
                        "enchantment": {
                            "title": "Enchantment",
                            "description": "The enchantment whose level to use for the chance calculation.",
                            "type": "string",
                            "enumSource": "enchantments"
                        }
                    },
                    "required": ["condition", "unenchanted_chance", "enchanted_chance", "enchantment"]
                },
                {
                    "title": "Reference",
                    "description": "References another predicate.",
                    "type": "object",
                    "properties": {
                        "condition": {"type": "string", "const": "minecraft:reference" },
                        "name": {
                            "type": "string",
                            "description": "The name of the referenced predicate."
                        }
                    },
                    "required": ["condition", "name"]
                },
                {
                    "title": "Time Check",
                    "description": "Checks the current time.",
                    "properties": {
                        "condition": { "const": "minecraft:time_check" },
                        "value": {
                            "type": ["integer", "object"],
                            "description": "An integer or a range object with min/max.",
                            "properties": {
                                "min": { "type": "integer", "description": "Minimum time value." },
                                "max": { "type": "integer", "description": "Maximum time value." }
                            }
                        },
                        "period": {
                            "type": "integer",
                            "description": "The period for the time check."
                        }
                    },
                    "required": ["value"]
                },
                {
                    "title": "Weather Check",
                    "description": "Checks the current weather.",
                    "properties": {
                        "condition": { "const": "minecraft:weather_check" },
                        "raining": {
                            "type": "boolean",
                            "description": "Whether it is currently raining."
                        },
                        "thundering": {
                            "type": "boolean",
                            "description": "Whether it is currently thundering."
                        }
                    }
                },
                {
                    "title": "Alternative",
                    "description": "Combines multiple predicates with OR logic.",
                    "properties": {
                        "condition": { "const": "minecraft:alternative" },
                        "terms": {
                            "type": "array",
                            "items": { "$ref": "#" },
                            "description": "A list of alternative predicates."
                        }
                    },
                    "required": ["terms"]
                }
            ]
        }
    }
}